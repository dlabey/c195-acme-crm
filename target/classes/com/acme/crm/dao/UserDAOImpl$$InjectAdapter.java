// Code generated by dagger-compiler.  Do not edit.
package com.acme.crm.dao;

import com.acme.crm.services.DatabaseService;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<com.acme.crm.dao.UserDAOImpl>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code com.acme.crm.dao.UserDAOImpl} and its
 * dependencies.
 *
 * Being a {@code Provider<com.acme.crm.dao.UserDAOImpl>} and handling creation and
 * preparation of object instances.
 */
public final class UserDAOImpl$$InjectAdapter extends Binding<UserDAOImpl> {
  private Binding<DatabaseService> dbService;

  public UserDAOImpl$$InjectAdapter() {
    super("com.acme.crm.dao.UserDAOImpl", "members/com.acme.crm.dao.UserDAOImpl", NOT_SINGLETON, UserDAOImpl.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    dbService = (Binding<DatabaseService>) linker.requestBinding("com.acme.crm.services.DatabaseService", UserDAOImpl.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(dbService);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<UserDAOImpl>}.
   */
  @Override
  public UserDAOImpl get() {
    UserDAOImpl result = new UserDAOImpl(dbService.get());
    return result;
  }
}
