// Code generated by dagger-compiler.  Do not edit.
package com.acme.crm.controllers;

import com.acme.crm.dao.UserDAO;
import com.acme.crm.services.SessionService;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.util.Set;

/**
 * A {@code Binding<com.acme.crm.controllers.LoginController>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code com.acme.crm.controllers.LoginController} and its
 * dependencies.
 *
 * Being a {@code Provider<com.acme.crm.controllers.LoginController>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<com.acme.crm.controllers.LoginController>} and handling injection
 * of annotated fields.
 */
public final class LoginController$$InjectAdapter extends Binding<LoginController> {
  private Binding<UserDAO> userDAO;

  private Binding<SessionService> sessionService;

  private Binding<MainController> supertype;

  public LoginController$$InjectAdapter() {
    super("com.acme.crm.controllers.LoginController", "members/com.acme.crm.controllers.LoginController", NOT_SINGLETON, LoginController.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    userDAO = (Binding<UserDAO>) linker.requestBinding("com.acme.crm.dao.UserDAO", LoginController.class, getClass().getClassLoader());
    sessionService = (Binding<SessionService>) linker.requestBinding("com.acme.crm.services.SessionService", LoginController.class, getClass().getClassLoader());
    supertype = (Binding<MainController>) linker.requestBinding("members/com.acme.crm.controllers.MainController", LoginController.class, getClass().getClassLoader(), false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(userDAO);
    getBindings.add(sessionService);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<LoginController>}.
   */
  @Override
  public LoginController get() {
    LoginController result = new LoginController(userDAO.get(), sessionService.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<LoginController>}.
   */
  @Override
  public void injectMembers(LoginController object) {
    supertype.injectMembers(object);
  }
}
